// Generated by gencpp from file planning/BuildStructureRequest.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_BUILDSTRUCTUREREQUEST_H
#define PLANNING_MESSAGE_BUILDSTRUCTUREREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planning
{
template <class ContainerAllocator>
struct BuildStructureRequest_
{
  typedef BuildStructureRequest_<ContainerAllocator> Type;

  BuildStructureRequest_()
    : blocks()
    , width(0)
    , height(0)  {
    }
  BuildStructureRequest_(const ContainerAllocator& _alloc)
    : blocks(_alloc)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _blocks_type;
  _blocks_type blocks;

   typedef int8_t _width_type;
  _width_type width;

   typedef int8_t _height_type;
  _height_type height;




  typedef boost::shared_ptr< ::planning::BuildStructureRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::BuildStructureRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BuildStructureRequest_

typedef ::planning::BuildStructureRequest_<std::allocator<void> > BuildStructureRequest;

typedef boost::shared_ptr< ::planning::BuildStructureRequest > BuildStructureRequestPtr;
typedef boost::shared_ptr< ::planning::BuildStructureRequest const> BuildStructureRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::BuildStructureRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::BuildStructureRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning::BuildStructureRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::BuildStructureRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::BuildStructureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::BuildStructureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::BuildStructureRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::BuildStructureRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::BuildStructureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5f3c99ef910d67f13a177a21b7d4f25";
  }

  static const char* value(const ::planning::BuildStructureRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5f3c99ef910d67fULL;
  static const uint64_t static_value2 = 0x13a177a21b7d4f25ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::BuildStructureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/BuildStructureRequest";
  }

  static const char* value(const ::planning::BuildStructureRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::BuildStructureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[] blocks\n\
int8 width\n\
int8 height\n\
";
  }

  static const char* value(const ::planning::BuildStructureRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::BuildStructureRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.blocks);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BuildStructureRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::BuildStructureRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::BuildStructureRequest_<ContainerAllocator>& v)
  {
    s << indent << "blocks[]" << std::endl;
    for (size_t i = 0; i < v.blocks.size(); ++i)
    {
      s << indent << "  blocks[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.blocks[i]);
    }
    s << indent << "width: ";
    Printer<int8_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int8_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_BUILDSTRUCTUREREQUEST_H
